/*
 * Copyright (c) 2014-present, salesforce.com, inc.
 * All rights reserved.
 * Redistribution and use of this software in source and binary forms, with or
 * without modification, are permitted provided that the following conditions
 * are met:
 * - Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of salesforce.com, inc. nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission of salesforce.com, inc.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.salesforce.androidsdk.util;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * This allows other classes (primarily test classes) to register & receive events generated by the sdk.
 */
public class JSONObjectHelper {

	/**
	 * Return null if object doesn't have key or if obj has null for key
	 * JSONObject.opt(key) return the JSONObject.NULL if object has null for key and null if object doesn't have key
	 */
	public static Object opt(JSONObject obj, String key) {
		return obj.isNull(key) ? null : obj.opt(key);
	}

	/**
	 * Return null if arr doesn't have value at index or the value is null
	 * JSONArray.opt(index) return the JSONObject.NULL if array has null at index and null if array doesn't have value at index
	 */
	public static Object opt(JSONArray arr, int index) {
		return arr.isNull(index) ? null : arr.opt(index);
	}


	/**
	 * Return null if obj doesn't have key or if obj has null for key - and return value as a  String[] otherwise
	 *
	 * @param obj
	 * @param key
	 * @return
	 * @throws JSONException
	 */ 
	public static String[] optStringArray(JSONObject obj, String key) throws JSONException {
        String[] result = null;
		JSONArray jsonArray = obj.isNull(key) ? null : obj.getJSONArray(key);
		if (jsonArray != null) {
            result = new String[jsonArray.length()];
            for (int i=0; i<result.length; i++) {
                result[i] = jsonArray.getString(i);
            }
        }
        return result;
	}

	/**
	 * Return null if obj doesn't have key or if obj has null for key
	 * JSONObject.optString(key, fallback) returns the string "null" if object has null for key and null if object doesn't have key
	 *
	 * @param obj
	 * @param key
	 * @return
	 * @throws JSONException
	 */
	public static String optString(JSONObject obj, String key) throws JSONException {
		return optString(obj, key, null);
	}
	
	/**
	 * Return the fallback if obj doesn't have key or if obj has null for key
	 * JSONObject.optString(key, fallback) returns the string "null" if object has null for key and null is object doesn't have key
	 * 
	 * @param obj
	 * @param key
	 * @param fallback
	 * @return
	 * @throws JSONException
	 */
	public static String optString(JSONObject obj, String key, String fallback) throws JSONException {
		return obj.isNull(key) ? fallback : obj.getString(key);
	}


	/**
	 * Convert JSONArray of T into list of T
	 * @param jsonArray
	 * @param <T>
	 * @return
	 * @throws JSONException
     */
	@SuppressWarnings("unchecked")
	public static <T> List<T> toList(JSONArray jsonArray) throws JSONException {
		if (jsonArray == null) {
			return null;
		}
		List<T> arr = new ArrayList<T>();
		for (int i=0; i<jsonArray.length(); i++) {
			arr.add((T) jsonArray.get(i));
		}
		return arr;
	}

	/**
	 * Convert JSONObject into Map of String to T
	 * @param jsonObject
	 * @param <T>
	 * @return
	 * @throws JSONException
	 */
	@SuppressWarnings("unchecked")
	public static <T> Map<String, T> toMap(JSONObject jsonObject) throws JSONException {
		if (jsonObject == null) {
			return null;
		}
		Map<String,T> map = new HashMap<>();
		for (Iterator<String> it = jsonObject.keys(); it.hasNext(); ) {
			String key = it.next();
			map.put(key, (T) jsonObject.get(key));
		}
		return map;
	}

	/**
	 * Given a JSONArray of JSONObject, return list made of values for key
	 * @param jsonArray
	 * @param key
	 * @param <T>
	 * @return
	 * @throws JSONException
     */
	@SuppressWarnings("unchecked")
	public static <T> List<T> pluck(JSONArray jsonArray, String key) throws JSONException {
		List<T> arr = new ArrayList<T>();
		for (int i=0; i<jsonArray.length(); i++) {
			arr.add((T) jsonArray.getJSONObject(i).get(key));
		}
		return arr;
	}

	/**
	 * Given an array of JSONObject, return list made of values for key
	 * @param jsonObjects
	 * @param key
	 * @param <T>
	 * @return
	 * @throws JSONException
	 */
	@SuppressWarnings("unchecked")
	public static <T> List<T> pluck(JSONObject[] jsonObjects, String key) throws JSONException {
		List<T> arr = new ArrayList<T>();
		for (JSONObject jsonObject : jsonObjects) {
			arr.add((T) jsonObject.get(key));
		}
		return arr;
	}

	/**
	 *
	 * @param key
	 * @param value
	 * @return JSONObject with value for key
	 */
	public static JSONObject makeJSONObject(String key, Object value) throws JSONException {
		JSONObject result = new JSONObject();
		result.put(key, value);
		return result;
	}

	/**
	 * Add all elements from array to destinationArray
	 *
	 * @param destinationArray
	 * @param array
	 */
	public static void addAll(JSONArray destinationArray, JSONArray array) throws JSONException {
		for (int i=0; i<array.length(); i++) {
			destinationArray.put(array.getJSONObject(i));
		}
	}

}
